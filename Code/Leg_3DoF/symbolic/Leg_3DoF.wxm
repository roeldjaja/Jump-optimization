/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 16.04.2 ] */

/* [wxMaxima: comment start ]
Calculate the dynamics of the 3-DoF leg: Forward kinematics, Jacobian, Inertia matrix, gravity vector,
using the Euler-Lagrange method.
   [wxMaxima: comment end   ] */

/* [wxMaxima: title   start ]
Forward kinematics
   [wxMaxima: title   end   ] */

/* [wxMaxima: comment start ]
We first define the forward kinematics for 3 masses, located at the CoM of the lower leg, the CoM of the
upper leg, and the CoM of the body (above the hip joint).
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Define the configuration vector q:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
depends(q1, t); depends(q2, t); depends(q3, t);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
q(t):= [q1, q2, q3];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
q: matrix([q1],[q2],[q3]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
And the forward kinematics:
fwdKin(q) = [x1, y1, theta1, x2, y2, theta2, x3, y3, theta3]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fwdKin: matrix(
    [-(1/2) * l1 * sin(q1)],
    [(1/2) * l1 * cos(q1)],
    [q1],
    [-l1 * sin(q1) - (1/2) * l2 * sin(q1 + q2)],
    [l1 * cos(q1) + (1/2) * l2 * cos(q1 + q2)],
    [q1 + q2],
    [-l1 * sin(q1) - l2 * sin(q1 + q2) - l3 * sin(q1 + q2 + q3)],
    [l1 * cos(q1) + l2 * cos(q1 + q2) + l3 * cos(q1 + q2 + q3)],
    [q1 + q2 + q3]
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: title   start ]
Jacobian, Cartesian velocities and accelerations
   [wxMaxima: title   end   ] */

/* [wxMaxima: comment start ]
The Jacobian is defined as the forward kinematics derived w.r.t. the configuration vector q:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
J: addcol(diff(fwdKin, q1), diff(fwdKin, q2), diff(fwdKin, q3));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Let's also get the end-effector Jacobian:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
J_endEffector: submatrix(1,2,3,4,5,6,9,J);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
which can be used for interaction forces on the trunk using J_endEffector^T * [Fx,Fy].
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
We have x_d = J * theta_d, where theta_d = [q1d, q2d, q3d]^T. Thus, the Cartesian velocities are given by
performing the multiplication:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fwdKin_vel: J . diff(q, t);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
And accelerations:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fwdKin_acc: diff(fwdKin_vel, t);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: title   start ]
Inertia matrix
   [wxMaxima: title   end   ] */

/* [wxMaxima: comment start ]
Define the nominal inertia matrix Mc, and use the Jacobian to calculate the inertia matrix M:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("diag");
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Mc: diag([m1, m1, J1, m2, m2, J2, m3, m3, J3]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
M: transpose(J) . Mc . J;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
In practice we calculate M and M^-1 numerically.
   [wxMaxima: comment end   ] */

/* [wxMaxima: title   start ]
Gravitational vector
   [wxMaxima: title   end   ] */

/* [wxMaxima: comment start ]
For the dynamics equations we have qdd = M(q)^-1 * [tau + G(q)] = M(q)^-1 * Q, where Q is the
generalised force.
Q = Jv' * F + Jw' tau_c, i.e. forces and torques. We have only external forces (gravity).
We define Gc:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Gc: transpose(matrix([0, -m1*g, 0, 0, -m2*g, 0, 0, -m3*g, 0]));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
and calculate the generalised force using the Jacobian:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
G: transpose(J) . Gc;
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
